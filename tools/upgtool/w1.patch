diff --git a/utils/nwztools/upgtools/upg.c b/utils/nwztools/upgtools/upg.c
index 3270ced..d1b98c0 100644
--- a/utils/nwztools/upgtools/upg.c
+++ b/utils/nwztools/upgtools/upg.c
@@ -60,6 +60,9 @@ static uint8_t g_des_passkey[9] = "ed295076";
 static uint8_t g_aes_passkey[17] = "9cc4419c8bef488c";
 static uint8_t g_aes_iv[17] = "6063ce1efa1d543a";
 
+static uint8_t g_aes_passkey_walkman_one[17] = "9cc4419c8bef488e";
+static uint8_t g_aes_iv_walkman_one[17] = "6063ce1efa1d543b";
+
 static int digit_value(char c)
 {
     if(c >= '0' && c <= '9') return c - '0';
@@ -73,7 +76,7 @@ static char hex_digit(unsigned v)
     return (v < 10) ? v + '0' : (v < 16) ? v - 10 + 'a' : 'x';
 }
 
-int decrypt_keysig(const char *kas, char **key, char **sig)
+int decrypt_keysig(const char *kas, char **key, char **sig, bool walkmanone)
 {
     int len = strlen(kas);
     if(len % 2)
@@ -101,6 +104,11 @@ int decrypt_keysig(const char *kas, char **key, char **sig)
     else if(len == 64)
     {
         /* device after WM1/NW-A30 */
+        if (walkmanone) {
+            memcpy(g_aes_passkey, g_aes_passkey_walkman_one, sizeof g_aes_passkey);
+            memcpy(g_aes_iv,g_aes_iv_walkman_one, sizeof g_aes_iv);
+        }
+
         aes_cbc_dec_set_key_iv(g_aes_passkey, g_aes_iv);
         aes_cbc_dec(src, len / 2, src);
     }
@@ -117,7 +125,7 @@ int decrypt_keysig(const char *kas, char **key, char **sig)
     return 0;
 }
 
-void encrypt_keysig(char **kas, const char *key, const char *sig)
+void encrypt_keysig(char **kas, const char *key, const char *sig, bool walkmanone)
 {
     int len = strlen(key);
     if(len != strlen(sig))
@@ -132,6 +140,11 @@ void encrypt_keysig(char **kas, const char *key, const char *sig)
     }
     else if(len == 16)
     {
+        if (walkmanone) {
+            memcpy(g_aes_passkey, g_aes_passkey_walkman_one, sizeof g_aes_passkey);
+            memcpy(g_aes_iv,g_aes_iv_walkman_one, sizeof g_aes_iv);
+        }
+
         aes_cbc_enc_set_key_iv(g_aes_passkey, g_aes_iv);
         aes_cbc_enc(src, len * 2, src);
     }
diff --git a/utils/nwztools/upgtools/upg.h b/utils/nwztools/upgtools/upg.h
index e6cdaba..10d76d3 100644
--- a/utils/nwztools/upgtools/upg.h
+++ b/utils/nwztools/upgtools/upg.h
@@ -180,9 +180,9 @@ struct upg_file_t
 
 /* Decrypt a KAS into a key and signature, return <0 if the KAS contains a non-hex
  * character. The function will allocate key and sig if *key and/or *sig is NULL */
-int decrypt_keysig(const char *kas, char **key, char **sig);
+int decrypt_keysig(const char *kas, char **key, char **sig, bool walkmanone);
 /* Encrypt a key and signature into a KAS, it will allocate kas if *kas is NULL */
-void encrypt_keysig(char **kas, const char *key, const char *sig);
+void encrypt_keysig(char **kas, const char *key, const char *sig, bool walkmanone);
 
 /* Read a UPG file: return a structure on a success or NULL on error.
  * Note that the memory buffer is modified to perform in-place decryption. */
diff --git a/utils/nwztools/upgtools/upgtool.c b/utils/nwztools/upgtools/upgtool.c
index b573532..0ebdb1e 100644
--- a/utils/nwztools/upgtools/upgtool.c
+++ b/utils/nwztools/upgtools/upgtool.c
@@ -47,6 +47,7 @@ static char *g_kas = NULL;
 static char *g_key = NULL;
 static char *g_sig = NULL;
 static int g_nr_threads = 1;
+bool g_walkmanone = false;
 #define MAX_NR_FILES    32
 bool g_compress[MAX_NR_FILES] = {false};
 const char *g_md5name[MAX_NR_FILES] = {NULL};
@@ -87,7 +88,7 @@ static int get_key_and_sig(bool is_extract, void *buf)
             cprintf(GREY, "The KAS has wrong length (must be 32 or 64 hex digits)\n");
             return 4;
         }
-        decrypt_keysig(g_kas, &g_key, &g_sig);
+        decrypt_keysig(g_kas, &g_key, &g_sig, g_walkmanone);
     }
     /* Otherwise require key and signature */
     else if(g_key && g_sig)
@@ -138,7 +139,7 @@ static int get_key_and_sig(bool is_extract, void *buf)
     {
         /* This is useful to print the KAS for the user when brute-forcing since
          * the process will produce a key+sig and the database requires a KAS */
-        encrypt_keysig(&g_kas, g_key, g_sig);
+        encrypt_keysig(&g_kas, g_key, g_sig, g_walkmanone);
     }
 
     cprintf(BLUE, "Keys\n");
@@ -517,6 +518,7 @@ static void usage(void)
     printf("  -s/--sig <sig>\tForce sig\n");
     printf("  -e/--extract\t\tExtract a UPG archive\n");
     printf("  -c/--create\t\tCreate a UPG archive\n");
+    printf("  -w/--walkmanone\t\tUse walkmanOne AES passkey and iv\n");
     printf("  -z/--compress <idx>\t\t(De)compress file <idx> (starts at 0)\n");
     printf("  -z/--compress <idx>,<md5name>\t\t(De)compress file <idx> and add it to the MD5 file\n");
     printf("When using -z <idx>,<md5name>, the file file size and MD5 prior to compression will\n");
@@ -551,12 +553,13 @@ int main(int argc, char **argv)
             {"sig", required_argument, 0, 's'},
             {"extract", no_argument, 0, 'e'},
             {"create", no_argument, 0 ,'c'},
+            {"walkmanone", no_argument, 0 ,'w'},
             {"threads", required_argument, 0, 't'},
             {"compress", required_argument, 0, 'z'},
             {0, 0, 0, 0}
         };
 
-        int c = getopt_long(argc, argv, "?dnfo:m:l:a:k:s:ect:z:", long_options, NULL);
+        int c = getopt_long(argc, argv, "?dwnfo:m:l:a:k:s:ect:z:", long_options, NULL);
         if(c == -1)
             break;
         switch(c)
@@ -608,6 +611,9 @@ int main(int argc, char **argv)
             case 'c':
                 create = true;
                 break;
+            case 'w':
+                g_walkmanone = true;
+                break;
             case 't':
                 g_nr_threads = strtol(optarg, NULL, 0);
                 if(g_nr_threads < 1 || g_nr_threads > 128)
